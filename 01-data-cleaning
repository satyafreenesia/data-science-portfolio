{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Supermarket Sales \u2014 Data Cleaning\n",
        "This notebook downloads the **Supermarket Sales** dataset from Kaggle, performs cleaning, and outputs `clean_supermarket_sales.csv`.\n",
        "Dataset (Kaggle): https://www.kaggle.com/datasets/aungpyaeap/supermarket-sales\n",
        "Make sure you have Kaggle CLI configured (`kaggle.json` in `~/.kaggle/`)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Install (if needed) & download dataset via kaggle CLI\n",
        "# kaggle datasets download -d aungpyaeap/supermarket-sales -p ./data --unzip\n",
        "import pandas as pd\n",
        "from pathlib import Path\n",
        "data_dir = Path('data')\n",
        "data_dir.mkdir(exist_ok=True)\n",
        "csv_candidates = list(data_dir.glob('*.csv'))\n",
        "print('CSV files in data/:', csv_candidates)\n"
      ],
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Example cleaning steps (will run if dataset present)\n",
        "csv_path = data_dir / 'supermarket_sales - Sheet1.csv'\n",
        "if csv_path.exists():\n",
        "    df = pd.read_csv(csv_path)\n",
        "else:\n",
        "    # try alternative names\n",
        "    csv_list = list(data_dir.glob('*.csv'))\n",
        "    if csv_list:\n",
        "        csv_path = csv_list[0]\n",
        "        df = pd.read_csv(csv_path)\n",
        "    else:\n",
        "        df = pd.DataFrame()\n",
        "\n",
        "if not df.empty:\n",
        "    # basic cleaning\n",
        "    df.columns = [c.strip().replace(' ', '_').lower() for c in df.columns]\n",
        "    df.drop_duplicates(inplace=True)\n",
        "    # parse date if present\n",
        "    if 'date' in df.columns:\n",
        "        df['date'] = pd.to_datetime(df['date'], errors='coerce')\n",
        "    # normalize gender\n",
        "    if 'gender' in df.columns:\n",
        "        df['gender'] = df['gender'].str.title()\n",
        "    df.to_csv(data_dir / 'clean_supermarket_sales.csv', index=False)\n",
        "    print('Saved clean_supermarket_sales.csv')\n",
        "else:\n",
        "    print('No CSV found in data/. Please download from Kaggle and place it in data/')\n"
      ],
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Visualizations (will show if df exists)\n",
        "import matplotlib.pyplot as plt\n",
        "if not df.empty:\n",
        "    if 'gender' in df.columns:\n",
        "        gender_counts = df['gender'].value_counts()\n",
        "        gender_counts.plot(kind='pie', autopct='%1.1f%%', title='Gender Distribution')\n",
        "        plt.ylabel('')\n",
        "        plt.show()\n",
        "    if 'city' in df.columns:\n",
        "        df['city'].value_counts().head(10).plot(kind='bar', title='Top cities by transactions')\n",
        "        plt.show()\n",
        "else:\n",
        "    print('No data to visualize')\n"
      ],
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.x"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
